<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUeLAARGCMIGyc6ZiQ0
        T9EkM07qJTRQyCc3UW4XIC8OHSc7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaIzMAEhomCS05
        TX05TGn0Rl2E/0dfiP9JY43/R2CJ+DVIZpwYIjMbJDBEABEdLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJER8AGyU0ABYg
        LhYiLT6VPE5r+FZwmP9mf6T/aIGn/22Js/9qirb/TWiR/iUzSsEOFyUzFyEzAA4WIwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBsfACs1
        RQAqNEIgIi0/sio4Tv5GXoX/WHip/1Rxnv89T2v/Rlt7/1d2pv9ScqP/NEdn/xkkNdUYIjM9GiY4ABUd
        KgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAwOUcAMTlGFC46SrAuPVf/LUBf/0RhkP9VeK7/SWaV/y49W/8yQmD/SGWU/1N2q/89Vn//KDlV/yY0
        S9YvPVExKTZKAEdYcQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAPUdVAEVLUQI9Sl2GO01o/kNdh/82TXb/Ql+R/114sP9jb63/aW+w/2dvs/9nebj/Xn+3/0Jf
        kP86VYP/OE92/z1Sda1ZcJILU2mMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABOX3QAUWB1NkpefelJY43/SGic/0Nei/8wRGv/QFGF/09Zlf9cZqT/Y26s/1ll
        oP9FWo7/M0p2/0Zkl/9DY5n/RGGQ81dznUZTbpoAcY+yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAcICRAEBhmABido+IWHCU/1Jvnv9Nb6b/Tmye/1Vsjf9RaIr/VGuR/0xh
        if9QZo7/W3Og/1Bpkf8xQmD/O1WF/0hpof9Ka5//WXmpmPD//AF2kbYAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB9jZ8AgI+eFHKHosxmf6X/Y4Gt/2KEtv9cf7P/b4qz/4CV
        s/9le5r/RFp9/zpQdv9WbZD/b4er/0tlj/9CYZf/VXmw/1l7sP9lhbTXfpq/G3yYvgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISVqgCHl6pGe4+s9XOMs/95k7r/eZjE/3qa
        yf9uj8D/fZS5/2yCp/+CnMT/h6PP/3iSuv9ohLL/Tm+m/2KGvf90mMr/dZfG/3KSv/aAm8JFfprCAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACSobYAX4KxAIqar4aDl7X/fpa7/4yi
        xf+Uqc7/ma7U/4Kgzv9/msT/qbfU/7LA4f+3yuz/vNDw/4ijz/9xksT/jazY/5654P+Wstr/hKLN/4ml
        y3CFosoAmKvGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKWyzQClsswklKS725Ci
        v/+MosT/l6rL/6Kw0f+ks9X/n7PZ/4GeyP+pt9L/ucTi/7/P7/+zyev/h6bT/5+54P+0yev/tsrr/6W+
        4/+UsNr/lK/VjImn0wCnv98AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobHRAKW1
        01udrMP9l6jF/5iry/+arM7/l6rO/5SnzP+esNP/k6jN/52uzf+2weD/u83u/6O94/+btt7/o7vh/6S7
        4f+swuX/sMbp/6W+4/+euN6aRGmtALPL6gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACrudYArLrXdKWzyv+NosL/jKLF/46jxv94lL7/aIe3/3KOvP+Gn8b/hJ3E/6q53P+1yOr/h6bS/3eW
        xP9efbH/XHuw/4Shzf+mvuL/nrfd/6K74J0AAAAAxtn0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAkaTBAI2j0QCSptF4mKnJ/3+Yvf9lhrb/ZX+q/2qCqf9lf6r/Xnmo/26Jtf9ribb/lavR/6K5
        3v9jhLb/XXqq/1Rtmf9feaP/WHSf/1x6qv93l8b/obvfq/D3/wOsw+UAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACPptIAb47KAIOcz42MoMf/gJe7/1NzpP89WIf/R1p6/0RRZv9FU2n/UmiT/1Bw
        pP+Gosv/hqTO/0hnnP9EWoP/LzxT/zxLY/80SGz/Q16O/3yaxf+ctt7RiqfgFYqn4AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJqv1QChwv8BgJXLo5Skw/+TpcH/doyt/1Jrkf9FX4n/PFJ0/y9B
        Yv8wRnH/S2mb/2+RwP9wksH/Smmc/y9Fcf8vQ2j/OVF7/0Bbif9rhq//orrc/5Ws4O5fe90yYX3fAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArLvUAMbV8QKHmMWpnqvB/5yrxP+NoL3/eIyp/1Fm
        iP9GWnn/OUxo/0tihv9vjbj/gKHM/3yeyv9mhbH/QFd8/ztPbv9GXH7/XHac/5St0/+nv+L/prrf+omg
        2VCHntkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADK1eMAX2x+AK+6y2Klr734nKvB/4md
        vv+MocL/hZzA/3+Yvv93lb7/iaXN/4+r0/+MqdH/haTO/4mmz/+Docv/f5/K/4elzf+SrdX/mLLZ/5mz
        2P+xxuHkw9PnLcLS5wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkrbkApK24P5+p
        tvSZqL7/jaHB/4Sbwf9/mcL/fJjD/36byP+JpM3/iqbO/4Wjzv+AoMz/eZnJ/3eXyf9+ns7/h6bR/42r
        1P+PrNX/l7LY/7LH49jF1ekYwtPoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCo
        swChqrVanaez/puqv/+VqMb/jKLF/3yXwf9wkL//cpPD/3iYx/+An8r/hKPN/4Ojzv9xlcj/ZInC/2iN
        xP92mcv/g6TR/5Kw2f+hut//t8vl4sfX6iHE1OgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAnKSvAJ6msWecpLD/o6/B/6Syzv+Wqcr/hJ7F/3eYx/94msr/fp/M/4qo0f+TrtX/k67W/4Ch
        zv9zmMv/dZnN/4Ol0/+Mq9f/mLXe/6e+4f+1x97mws/hJr/M4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACRl6EAk5qjXZCWoP6dprL/tcDV/6q30/+crtD/kanP/4+p0f+Wr9b/oLbb/5+2
        3P+gt9z/mbPa/5Ow2v+btt//pL3j/6K84v+lvuT/obbW/6KwxuCqt8ogqLXJAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIaNlQCIjpdGgYeP+IGHkP+stcT/tsHW/6261f+gsND/m63N/52w
        0f+itdj/oLXZ/5+02f+dtNj/nbTY/6W63P+nu9v/rsTk/63C4f+DmLP/gpOnyZGgsw+OnrEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAipGaAIySnCx1eoLqYmdv/2lxe/92gZD/doSZ/3mL
        pP92iqX/dImk/3WKp/9ziaf/d42t/3SLqf9sgqH/cYek/3uQrf90iKT/YHKN/1VmfP9qfJCe////AYiZ
        rwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfp7IArbbBD3l/iMZSVl7/SEtU/0RK
        U/9ASFP/S1hp/1Njd/9XaH3/VGV5/1RmfP9dcIb/XXCF/1hrgf9VZnv/TFxw/z1KXf85Rln/QU9i/V1u
        g2JKWm8AkaK1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALS/zABDSVIAh5Cbd1Va
        Y/9DR1D/R0xW/0JJU/9HUF3/TVhn/0xXZ/9NWWj/UV5v/1dmeP9QXW7/TFlr/0tZav9HVGf/Q1Bi/z9L
        Xf9CT2PdWGp/I1ZnfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJKe
        rQCZpbQjaXB710VKU/9FS1T/RkxV/0hPWv9LVGD/UFlm/1Rdav9YZHP/W2d1/1Zgb/9OWWj/Tltr/09d
        bv9FUmT/PElc/0VVaob///8BXXCGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAp7jLABsgKAB+i5pfV19r80ZMVf9MU13/TVRe/0tRW/9PV2L/W2Vy/19qeP9mcH3/a3WC/2Ft
        e/9VYnP/VWN1/0NRZP86SV67QVJpGj9PZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAna7CAMXX7QVvfY5sTFdk6U1UYP9XXmj/WmBq/1ZdZ/9haXT/c3uG/3N7
        h/9qdoP/Wmh5/1Jhc/9RYnf+Slx0uEZZdCZGWHAARl19AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgpeuAKXA2wJgcIM8VmR1rl1odvFpcn7/aHB7/2Bp
        dv9mcH3/YGx7/1xqfP9gcob/YnaN511yjYVbcIwWVmqDAIOgxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAz+nxAF1vhQBnfJMMZnaJSHyJ
        mIyDj568b32N2Gd2iOZoeYzfbH+Wym+EnpJ5jqk6f5e0BHyTsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//Af///gD///wAf//4AD//8AAf/+AAD//gAA//4AAH/8AAB//AAAf/wA
        AH/4AAB/+AAAf/gAAH/4AAA/+AAAP/AAAD/wAAA/+AAAP/gAAD/4AAA/+AAAP/gAAD/4AAA/+AAAP/gA
        AH/8AAB//AAAf/4AAP/+AAH//wAD///AB/8=
</value>
  </data>
</root>