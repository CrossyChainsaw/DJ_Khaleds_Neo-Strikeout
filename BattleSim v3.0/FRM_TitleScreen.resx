<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgAHBwcBBgYGGQgICAwHBwcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBgYAGBQUAQMBAUsBAQHJBAQEQAMD
        AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQQEAAcGBgYDAQFlAgoK6gED
        A+IEBAQjBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANzc3AAQBAQAFAwIOAgAAhQMl
        JvQFSUr/AgcHtgcBAQgHBwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoKAAAAAAABAEBGwID
        A6IDMzT7A4eI/wRNTv8CAAB+AAAAABoaGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBARpAwMDMQoK
        CgQHBwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAREREAAAAAAAQA
        ADACBga+A0BB/wKPkf8ClZf/Ayss+AMAAEoCAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIC
        AsABAQHpAgICmwQAADoKBgYGBAAAAFFPTwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQkJACYv
        LwADAABFAgwM1wNSU/8ClJb/AZud/wOChP8CFBTfBAAAIAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABAQELgECAtQFKyv/BCQk7QMFBacDAABHBwMDCwQAAAALCgoAAAAAAAAAAAAAAAAAAAAAAAgH
        BwAMCgoFAgAAYAIVFeUDZGb/AZmb/wGanP8Bm53/A2hp/wMGBrcKBAQICgoKAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAgAAVQQkJPIEeXv/BF1e/wMmJvMCBga0AwAAUgcDAw8AAAAAIB0dAAAA
        AAADAwMABAMDCwIAAH8DICDzA3R2/wGbnf8BmZv/AZmb/wGanP8DRUb/AgAAfwAAAAAfHx8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgAIBQUEAgAAiwNAQf4Cl5n/Ao+R/wNkZf8DLC33AwkJwAMA
        AF4FAQEVAAAAAAQCAhgCAQGbAy4v+gOChP8Bm53/AZmb/wGZm/8BmZv/ApOU/wMpKfcDAABHAgICAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwAEAAAXAgcHvQNcXf8Bm53/AZud/wKS
        lP8Ea23/BDQ1+gMNDssCAAB5AgUFuAM7PP4Ci43/AZud/wGZm/8BmZv/AZmb/wGanP8DgYL/AxMT3AUA
        AB4FBQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGAAEAAAACAAA6AhUW4wJ5
        ev8Bm53/AZmb/wGbnf8ClZf/BHN0/wQ8Pf8DU1T/ApOV/wGanP8BmZv/AZmb/wGZm/8BmZv/AZud/wNi
        ZP8CBASwDAUFBQoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwcHAAAA
        AAACAABqAyor+AKNj/8Bmpz/AZmb/wGZm/8Bm53/Apmb/wGZm/8Bmpz/AZmb/wGZm/8BmZv/AZmb/wGZ
        m/8Bmpz/A0JD/wIAAHgAAAAAHBwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAwMDAAMAAAoCAgKfA0tM/wGYmv8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZ
        m/8BmZv/AZmb/wKSk/8DJif2AgAARAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAyMjIAAgEBAAMAACICDQ3QA2lq/wGanP8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZ
        m/8BmZv/AZmb/wGZm/8Bmp3/AoCC/wMSE90GAAAgBgUFADk2NgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgACAAAABAEBIQIBAcQESkv/AZqc/wGZm/8BmZv/AZmb/wGZ
        m/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGanP8ChIb/Aycn9QMFBaYDAABFCQUECQIAAAAoJCQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwAAAAAAAMAADQCCAjDA0dJ/wKPkf8Bmpz/AZmb/wGZ
        m/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8CjI7/BF1e/wQlJvMDBwexAwAAUAcC
        Ag4BAAAAFRMTAAAAAAAAAAAAAAAAAAAAAAAAAAAACQkJABQVFQECAABOAg8Q2wNZWv8Clpj/AZqc/wGZ
        m/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGanP8Bm53/Ao6Q/wRi
        ZP8DKyz2AwkJuwMAAFoGAgISAAAAABQSEgAAAAAAAAAAAAQEBAAGBQUFAgAAZgIYGOoDamv/AZqc/wGZ
        m/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8BmZv/AZmb/wGZm/8Bmpz/AZqc/wGa
        nP8Bmpz/AZye/wKSlP8Eamv/BDIz+QMMDMQDAABjBgUFFgAAAAASEhIABQUFEAIAAIMDJCX0A3l6/wKY
        mv8Clpj/ApWX/wKUlv8ClJb/ApSW/wKTlf8Cl5n/AZmb/wGZm/8BmZv/AZmb/wGZm/8BmZv/ApeZ/wKP
        kf8CjpD/Ao6Q/wKOkP8CjpD/Ao+R/wKRk/8Dioz/BWRl/wUrK/wCBATPAgEBcAQEBB8CAgKXAQIC9gQk
        JfoDNzj5BDIy+QQxMvcELi/0BCwt8wQtLvMELS3yAygp9ANLTP4ClZf/AZmb/wGZm/8BmZv/AZmb/wGb
        nf8DYmP/AyAh8AMjI+QDIyPlBCMj5QQjI+UEIyPlBSQk5QQkJeUEJSXlBR0d5QMFBegCAgLkAwMDtAUF
        BTsGBgZKBQICSQUAAEkFAABJBgAARAgAADwLAQE6DAMDOQoCAjcEAAA/AggIwQNgYf8Bm53/AZmb/wGZ
        m/8BmZv/ApeZ/wM0NfsGAABsDQAAIA0AACQNAAAkDAAAJAwAACQMAAAkDAAAJA4CASQOBAQkDgwMJAwM
        DCUICAggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMAAIAAAACAAA/AxkZ5wN+
        f/8Bm53/AZmb/wGanP8CiIr/Ahoa5wUAACkEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwsLADQz
        MwECAAB3BDIz/AKRk/8Bmpz/AZud/wNxcv8CCQnEBQAADQYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABwYGAAcDAw8CBQWwA1VV/wGanP8Bm53/A1RV/wIAAJIAAAAADQ0NAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAZGRkAAgEBAAQAAC8DExPcA3V3/wKam/8DNzj9AgAAWwAAAABJSUkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoAAAAAAAIAAGMDLCz3BIGD/wMfIOkDAAAsAwMDAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQUABwICCAIGBpwFMDD/Ag4OxgUA
        AA4HBwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNTUwADAgIABQQEIgEB
        AdICAgKXAAAAABEREQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQ
        EAAAAAAAAwMDQQMDAzkAAAAA19fXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////H////h////wf///4H///8D/H/+A/wf/AP8B/AD/gHgB/4AQ
        Af/AAAH/4AAB//AAA//wAAP/+AAD//gAAP/wAAA/wAAAD4AAAAMAAAAAAAAAAAAAAAD/4A///+AP///w
        H///+B////wf///8H////j////8///////8=
</value>
  </data>
</root>